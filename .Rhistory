test
ranks
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
library(PLRank)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
data.iris
dset=data.iris
dset
k=10
nFolds=10
nRuns=10
alpha=0.05
library(FNN)
K <- k
nbFold <- nFolds
nbRuns <- nRuns
nbRows <- dim(dset)[1] # number of instances (rows)
nbCols <- dim(dset)[2] # number of attributes including label ranking (columns)
nbRows
nbCols
s=dset[1,nbCols] # The string to search in
s=sapply(s,as.character)
p <- "L" # The character to search for
s2 <- gsub(p,"",s)
nbLabel <- numOcc <- nchar(s) - nchar(s2)
nbLabel
pl_h <- c(0) # number of times the 2-vase model is selected
nbClassify <- 0 # number of all test rows that have been classified
h <- 0 # logical number of loglikelihood ratio test, h=1: 2-vase model is preferred, h=0: 1-vase model is preferred
nb <- 0
pl1_ta <- c(0) # number of Kendall's tau for 1-vase model
pl2_ta <- c(0) # number of Kendall's tau for 2-vase model
pl3_ta <- c(0) # number of Kendall's tau for mix model (1-vase and 2-vase model)
pl1_sp <- c(0) # number of Spearman rank correlation for 1-vase model
pl2_sp <- c(0) # number of Spearman rank correlation for 2-vase model
pl3_sp <- c(0) # number of Spearman rank correlation mix model (1-vase and 2-vase model)
# Average Kendall's tau for each run in 10-fold cross-validation
pl1_ta_cv_avg <- c(0)
pl2_ta_cv_avg <- c(0)
pl3_ta_cv_avg <- c(0)
# Average Spearman rank correlation for each run in k-fold cross-validation
pl1_sp_cv_avg <- c(0)
pl2_sp_cv_avg <- c(0)
pl3_sp_cv_avg <- c(0)
# Average likelihood ratio test
pl1_ll_avg <- c(0)
pl2_ll_avg <- c(0)
pl3_ll_avg <- c(0)
dset <- data.frame(scale(dset[,1:dim(dset)[2]-1]), Ranks=dset[,dim(dset)[2]]) # Standardized the features
dset
dset <- dset[order(dset$Ranks),] # Sort dataset according to their class
dset
dset <- sortRandom(dset) # Sort dataset according random random column
sortRandom <- function(dset) {
dsetRowNumber <- dim(dset)[1] # Total number of rows
set.seed(1)
randomCol <- runif(dsetRowNumber) # A random column
temp <- cbind(randomCol,dset)
dsetSorted <- temp[order(temp$randomCol),]
return(dsetSorted)
}
dset <- sortRandom(dset) # Sort dataset according random random column
dset
dset <- dset[2:dim(dset)[2]]
dset
fold <- cv.getFolds(nbRows, nbFold) # get fold index
fold
run=1
message("Evaluating fold...", run)
# Test and train dataset
testRows <- c(fold$TestS[run]:fold$TestE[run])
trainRows <- c(fold$TrainS1[run]:fold$TrainE1[run], fold$TrainS2[run]:fold$TrainE2[run])
testFeatures <-  dset[testRows, 1:(dim(dset)[2]-1)]
trainFeatures <- dset[trainRows, 1:(dim(dset)[2]-1)]
testClasses <- dset[testRows, dim(dset)[2]]
trainClasses <- dset[trainRows, dim(dset)[2]]
trainClasses
actual_rank <- gsub('L','',testClasses)
actual_rank <- gsub('>',' ',actual_rank)
actual_rank <- data.frame(strsplit(actual_rank,' '))
colnames(actual_rank) <- c(1:dim(actual_rank)[2])
actual_rank <- t(actual_rank)
class(actual_rank) = "numeric"
actual_rank
instance <- get.knnx(trainFeatures, testFeatures, K, algo="kd_tree")
instance
ranks <- knn.getRanks(trainClasses, instance$nn.index)
ranks
dim(ranks)[2]
nbTest = 1
nbClassify=nbClassify+1
temp <- gsub('L','',ranks[,nbTest])
temp <- gsub('>',' ',temp)
test <- data.frame(strsplit(temp,' '))
colnames(test) <- c(1:dim(test)[2])
test <- t(test) # all ranks in each row of test set
class(test) = "numeric"
test
if (nbTest==1) {
pl1_para <- matrix(0,dim(ranks)[2], dim(test)[2]) # estimate parameters
pl2_para <- pl1_para # estimate parameters
pl1_rank <- pl1_para # rank order of 1-vase model
pl2_rank <- pl1_para # rank order of 2-vase model
pl3_rank <- pl1_para # rank order mixed between 1-vase and selected 2-vase model
pl1_ll <- c(0)
pl2_ll <- c(0)
pl3_ll <- c(0)
}
pl1_para
pl2_para
pl1_rank
pl2_rank
skipDset <- FALSE
skip2vase <- FALSE
tmp1 <- est.PL.MM(test)
tmp1
if (is.nan(tmp1$loglikelihood)) {
pl1_ll[nbTest] <- 3333
message("Nan produced")
skip2vase <- TRUE
} else {
pl1_ll[nbTest] <- tmp1$loglikelihood
}
pl1_rank[nbTest,] <- order(tmp1$para, decreasing = TRUE) # rank index
pl1_rank
if (skip2vase) {
pl2_rank[nbTest,] <- pl1_rank[nbTest,]
pl2_ll[nbTest] <- pl1_ll[nbTest]
} else {
tmp2 <- getLL(test) # getLL has try() to check error
pl2_ll[nbTest] <- tmp2$loglikelihood # loglikelihood
tmp3 <- getParaV2(tmp2$para, tmp2$L) # parameters and cutpoint (L)
pl2_rank[nbTest,] <- tmp3$rank
}
getLL <- function(dset) {
nitem <- dim(dset)[2]
ll <- c(0)
result.extend <- matrix(0,nitem-1,nitem*2)
for (i in 1:(nitem-2)) {
tmp <- try(est.PL2.NR(dset, i),TRUE)
if ( inherits(tmp, "try-error") ) {
ll[i] <- -999999 # this won't be select
} else {
result.extend[i,] <- tmp$para
ll[i] <- tmp$loglikelihood
}
}
L <- which.max(ll)
result <- list("L"=L,"loglikelihood"=ll[L], "para"=result.extend[L,])
return(result)
}
#
# getParaV2 get the most probable rank
#
getParaV2 <- function(para, L) {
labels <- length(para)/2
v_rank <- c(0)
v_para <- c(0)
v1 <- para[1:labels]/sum(para[1:labels])
r1 <- order(v1, decreasing = TRUE) # rank index
v2 <- para[(labels+1):(2*labels)]/sum(para[(labels+1):(2*labels)])
r2 <- order(v2, decreasing = TRUE) # rank index
# skip V2 if V2 contains the same parameters/rank (e.g. 1 1 1)
if (all(r2==1)) {
v_rank <- r1
v_para <- v1
} else {
v_rank[1:L] <- r1[1:L]
v_para[1:L] <- v1[r1[1:L]]
v_rank[(L+1):labels] <- setdiff(r2,v_rank)
v_para[(L+1):labels] <- v2[v_rank[(L+1):labels]]
}
v_para = v_para/sum(v_para)
result <- list("para"=v_para[order(v_rank)], "rank"=v_rank)
return(result)
}
# pl2
if (skip2vase) {
pl2_rank[nbTest,] <- pl1_rank[nbTest,]
pl2_ll[nbTest] <- pl1_ll[nbTest]
} else {
tmp2 <- getLL(test) # getLL has try() to check error
pl2_ll[nbTest] <- tmp2$loglikelihood # loglikelihood
tmp3 <- getParaV2(tmp2$para, tmp2$L) # parameters and cutpoint (L)
pl2_rank[nbTest,] <- tmp3$rank
}
pl2_rank
test
getLL(test)
source('~/dropbox/thesis/codes/R/PLRank/R/est.PL2.NR.R', echo=TRUE)
getLL(test)
if (skip2vase) {
pl2_rank[nbTest,] <- pl1_rank[nbTest,]
pl2_ll[nbTest] <- pl1_ll[nbTest]
} else {
tmp2 <- getLL(test) # getLL has try() to check error
pl2_ll[nbTest] <- tmp2$loglikelihood # loglikelihood
tmp3 <- getParaV2(tmp2$para, tmp2$L) # parameters and cutpoint (L)
pl2_rank[nbTest,] <- tmp3$rank
}
pl2_rank
h <- eval.LRatioTest(pl2_ll[nbTest], pl1_ll[nbTest], nbLabel-1, alpha) # degree of freedom = nbLabel-1
pl1_ll
pl2_ll
nbLabel
alpha
nbTest
eval.LRatioTest(pl2_ll[nbTest], pl1_ll[nbTest], nbLabel-1, alpha)
pl2_ll[nbTest]
pl1_ll[nbTest]
eval.LRatioTest(1, 1, nbLabel-1, alpha)
altLogL = c(-10.87)   # loglikelihood from an alternative model
nullLogL = c(-10.039) # loglikelihood from a hull model
dof = 2 # degrees of freedom
eval.LRatioTest(altLogL, nullLogL, dof)
eval.LRatioTest <- function(altLogL, nullLogL, dof, alpha=0.05) {
h<-0
lrs <- 2*abs(altLogL-nullLogL)
p <- pchisq(lrs, dof, lower.tail = FALSE)
if (p<alpha) h<-1
return(h)
}
eval.LRatioTest(pl2_ll[nbTest], pl1_ll[nbTest], nbLabel-1, alpha)
h <- eval.LRatioTest(pl2_ll[nbTest], pl1_ll[nbTest], nbLabel-1, alpha) # degree of freedom = nbLabel-1
if (h == 1) { # 2-vase model is selected
pl3_rank[nbTest,] <- pl2_rank[nbTest,]
pl_h[nbClassify] <- 1
pl3_ll[nbTest] <- pl2_ll[nbTest]
} else { # 1-vase model is selected
pl3_rank[nbTest,] <- pl1_rank[nbTest,]
pl_h[nbClassify] <- 0
pl3_ll[nbTest] <- pl1_ll[nbTest]
}
#########################
# Evaulations
#########################
message(File, nbClassify,"/",nbRows)
message(nbClassify,"/",nbRows)
# Construct a matrix
t1 <- data.frame(as.numeric(actual_rank[nbTest,]), pl1_rank[nbTest,])
t2 <- data.frame(as.numeric(actual_rank[nbTest,]), pl2_rank[nbTest,])
t3 <- data.frame(as.numeric(actual_rank[nbTest,]), pl3_rank[nbTest,])
# Kendall's tau
pl1_ta[nbTest] <- eval.KendallTau(t1)
pl2_ta[nbTest] <- eval.KendallTau(t2)
pl3_ta[nbTest] <- eval.KendallTau(t3)
# Spearman rank correlation
pl1_sp[nbTest]  <- eval.SpearmanRho(t1)
pl2_sp[nbTest]  <- eval.SpearmanRho(t2)
pl3_sp[nbTest]  <- eval.SpearmanRho(t3)
}
nb <- nb+1
library(PLRank)
?cv.knn
dset = data(data.iris)
cv.knn(dset, k=15, nFolds=10, nRuns=10, alpha=0.05)
dset
dset = data(data.iris)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
test
est.PL2.NR(test,1)
est.PL2.NR(test,2)
est.PL2.NR(test,1)
dset = data(data.iris)
cv.knn(dset, k=15, nFolds=10, nRuns=10, alpha=0.05)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
getLL(test)
K
nb
library(PLRank)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
?browser
library(PLRank)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
tmp2
test
getLL
getLL(test)
getLL
getLL(test)
test
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
test
getLL
getLL <- function(dset) {
nitem <- dim(dset)[2]
ll <- c(0)
result.extend <- matrix(0,nitem-1,nitem*2)
for (i in 1:(nitem-2)) {
tmp <- try(est.PL2.NR(dset, i),TRUE)
if ( inherits(tmp, "try-error") ) {
ll[i] <- -999999 # this won't be select
} else {
result.extend[i,] <- tmp$para
ll[i] <- tmp$loglikelihood
}
}
L <- which.max(ll)
result <- list("L"=L,"loglikelihood"=ll[L], "para"=result.extend[L,])
return(result)
}
c
library(PLRank)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
library(PLRank)
getLL
library(PLRank)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
getLL
source('~/dropbox/thesis/codes/R/PLRank/R/cv.knn.R', echo=TRUE)
cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
result=cv.knn(data.iris, k=15, nFolds=10, nRuns=10, alpha=0.05)
result
result=cv.knn(data.wine, k=25, nFolds=10, nRuns=10, alpha=0.05)
result
result=cv.knn(data.authorship, k=20, nFolds=10, nRuns=10, alpha=0.05)
result
source('~/dropbox/thesis/codes/R/PLRank/R/cv.knn.R', echo=TRUE)
result=cv.knn(data.authorship, k=20, nFolds=10, nRuns=10, alpha=0.05)
result
result=cv.knn(data.wine, k=25, nFolds=10, nRuns=10, alpha=0.05)
result
?eval.CV
result=cv.knn(data.wine, k=25, nFolds=10, nRuns=10, alpha=0.05)
result
summary(result)
library(PLRank)
ranks = matrix(0,2,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
est.PL.MM(ranks)
ranks = matrix(0,3,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
ranks[3,] = c(2,1,0) # L2>L1
est.PL.MM(ranks)
ranks = matrix(0,2,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
est.PL.MM(ranks)
est.PL2.NR(ranks,1)
est.PL2.NR(ranks,2)
?Rd2latex
??Rd2latex
install.packages("Rd2latex ")
est.PL2.NR(ranks,1)
ranks = matrix(0,3,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
ranks[3,] = c(2,1,0) # L2>L1
est.PL.MM(ranks)
ranks = matrix(0,2,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
est.PL.MM(ranks)
est.PL.MM(ranks)
?est.PL.MM
source('~/.active-rstudio-document', echo=TRUE)
Rd2latex("./man/genRank1v.Rd")
library("Rd2latex")
install.packages("Rd2latex")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
?est.PL.MM
lables = 4
observations = 10
dataset = genRank1v(lables, observations)
dataset
write.table(dataset, "dataset_1v.txt", sep="\t")
lables = 4
observations = 10
L = 2
dataset = genRank2v(lables, observations, L)
dataset
lables = 4
observations = 10
dataset = genRank1v(lables, observations)
est.PL.MM(dataset)
est.PL.MM(dataset$rank)
# complete rankings
# create 2 ranks and 3 labels
ranks = matrix(0,2,3) # rows:number of ranks, column:number of labels
ranks[1,] = c(1,2,3) # L1>L2>L3
ranks[2,] = c(3,1,2) # L3>L1>L2
est.PL.MM(ranks)
data.iris
iris
xx = data.iris
View(xx)
result
table(result$pl1_ta,result$pl2_ta,result$pl3_ta)
rval <- matrix(rep(NA, 10), ncol = 4)
rval <- matrix(rep(NA, 12), ncol = 4)
colnames(rval) <- c("#", "IBPL1", "IBPL2", "IBPLH")
rownames(rval) <- 1:2
rval
rownames(rval) <- 1:3
rownames
rval <- matrix(rep(NA, 12), ncol = 4)
colnames(rval) <- c("#", "IBPL1", "IBPL2", "IBPLH")
rownames(rval) <- 1:3
rval
result
rval[,1] <- c(r$pl1_ta, r$pl2_ta, r$pl3_ta)
r=result
rval[,1] <- c(r$pl1_ta, r$pl2_ta, r$pl3_ta)
rval[,2] <- c(r$pl1_sp, r$pl2_sp, r$pl3_sp)
rval[,3] <- c(r$pl1_ll, r$pl2_ll, r$pl3_ll)
title <- "Stratified cross validation\n"
topnote <- paste("Model ", format(1:3),": ", list("Kendall's tau", "Spearman's rho", "Log Likelihood"), sep="", collapse="\n")
structure(as.data.frame(rval), heading = c(title, topnote), class = c("anova", "data.frame"))
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
o <- matrix(rep(NA, 3), ncol = 3)
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(o) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
o <- matrix(rep(NA, 3), ncol = 4)
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(o) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
cv
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(o) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
?colnames
o <- matrix(rep(NA, 3), ncol = 3)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
o <- matrix(rep(NA, 12), ncol = 4)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
o <- matrix(NA, 3,3)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
o <- matrix(NA, 4, 4)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
o <- matrix(NA, 3, 4)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames() <- c("IBPL1", "IBPL2", "IBPLH")
rownames() <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv
o
o <- matrix(NA, 3, 3)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(o) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv
cv <- as.table(cv)
cv
o <- matrix(NA, 3, 3)
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(o) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(o) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv
cv <- as.table(cv)
cv
o
cv
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(cv) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(cv) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
cv <- as.table(cv)
cv
table
?table
cv
title <- "Stratified cross validation\n"
topnote <- paste("Model ", format(1:3),": ", list("Kendall's tau", "Spearman's rho", "Log Likelihood"), sep="", collapse="\n")
structure(as.data.frame(cv), heading = c(title, topnote), class = c("anova", "data.frame"))
structure(as.data.frame(cv), heading = c(title), class = c("anova", "data.frame"))
structure(cv, heading = c(title), class = c("anova", "data.frame"))
cv <- as.table(cv)
cv
summary(cv)
แอ
cv
library("PLRank")
ff=10
messages("Stratified cross validation", "test mode ", ff ," folds cross validation")
message("Stratified cross validation", "test mode ", ff ," folds cross validation")
message("test mode ", ff ," folds cross validation")
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(cv) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(cv) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
messsage("-----------------------------------------")
message("-----------------------------------------")
message("Test mode ", ff ," folds cross validation")
messsage("-----------------------------------------")
message("Stratified cross validation")
cv <- as.table(cv)
source('~/.active-rstudio-document', echo=TRUE)
ff=10
cv = matrix(c(r$pl1_ta, r$pl2_ta, r$pl3_ta, r$pl1_sp, r$pl2_sp, r$pl3_sp, r$pl1_ll, r$pl2_ll, r$pl3_ll), ncol=3, byrow=TRUE)
colnames(cv) <- c("IBPL1", "IBPL2", "IBPLH")
rownames(cv) <- c("Kendall's tau", "Spearman's rho", "Log Likelihood")
message("-----------------------------------------")
message("Test mode ", ff ," folds cross validation")
message("-----------------------------------------")
message("Stratified cross validation")
cv <- as.table(cv)
message("Test mode ", ff ," folds cross validation\n")
cv
?cv.knn
eval.LRatioTest(-14.4274801, -19.2044862, 3)
eval.LRatioTest(-14.4274801, -19.2044862, 2)
?iris
